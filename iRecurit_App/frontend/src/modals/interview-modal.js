import React from "react";
import styles from "./interview-modal.module.css";
import { ReactComponent as GreenCircle } from "../assets/icons/green-check-circle.svg";
import { ReactComponent as FaRegCircle } from "../assets/icons/red-circle.svg";
import { ReactComponent as FaRegClock } from "../assets/icons/grey-circle.svg";
import { ReactComponent as Progress } from "../assets/icons/in-progress-font.svg";


const interviewResult = (status) => {
  if (status === "pass")
    return <GreenCircle />
  else if (status === "fail")
    return <FaRegCircle />
  else return <FaRegClock />
}


const interviewProgress = (status) => {

}


const InterviewTimeline = () => {
  const rounds = [
    { status: "pass", bgColor: styles.green, title: "Round 1", date: "22/11/2024", notes: "" },
    { status: "pass", bgColor: styles.green, title: "Round 2", date: "22/11/2024", notes: "" },
    { status: "fail", bgColor: styles.red, title: "Round 3", date: "", notes: "To be scheduled" },
    { status: "", bgColor: styles.gray, title: "Round 4", date: "", notes: "", opacity: styles.opacity },
    { status: "", bgColor: styles.gray, title: "Round 5 - Face to Face", date: "", notes: "", opacity: styles.opacity }
  ];

  return (
    <div className={styles.container}>
      {rounds.map((round, index) => (
        <div key={index} className={`${styles.roundItem} ${round.opacity || ""}`}>
          {/* Show connecting line except for the last item */}
          {index > 0 && index < rounds.length - 1 && <div className={styles.verticalLine}></div>}

          {/* Status Icon */}
          <div className={styles.upperZindex}>{interviewResult(round.status)}</div>

          {/* Round Content */}
          <div className={styles.contentBox}>
            <div className={styles.content}>
              <div className={styles.title}>{round.title}</div>
              <div className={styles.details}>Date: {round.date} | Notes: {round.notes}</div>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};








const InterviewModal = ({ isInterviewModalOpen, setIsInterviewModalOpen }) => {
  console.log(isInterviewModalOpen)
  if (!isInterviewModalOpen) return null; // Hide modal if isOpen is false

  // Dummy Data
  const jobDetails = {
    title: "Job Description - Sr. Software Engineer 2024",
    company: "Tesla",
    location: "Gurugram, Haryana",
    id: "TS02345",
    type: "Full-time",
    department: "IT Software",
    status: "Active",
  };

  const candidate = {
    name: "Nidhi Rawat",
    date: "18/11/2024",
    location: "Gurugram, India",
    score: "3.4",
  };

  const interviewRounds = [
    { round: 1, date: "22/11/2024", status: "completed" },
    { round: 2, date: "22/11/2024", status: "completed" },
    { round: 3, date: "", status: "pending" },
    { round: 4, date: "", status: "disabled" },
    { round: 5, date: "", status: "disabled", label: "Face to Face" },
  ];

  return (
    <div className={styles.modalOverlay}>
      <div className={styles.modalContainer}>
        {/* Job Header */}
        <div className={styles.header}>
          <div>
            <div className={styles.jobHeading}>{jobDetails.title}</div>
            <div className={styles.companyName}>{jobDetails.company} - {jobDetails.location}</div>
            <div className={styles.jobDetails}>
              Job ID - <span className={styles.jobId}>{jobDetails.id}</span> | {jobDetails.type} | Department - {jobDetails.department}
            </div>
          </div>
          <div className={styles.status}> <span style={{ color: 'black' }}> Status </span> {jobDetails.status}</div>

        </div>

        {/* Candidate Profile */}
        <div className={styles.profileSection}>
          <div className={styles.profileHeader}>
            <h3>{candidate.name}</h3>
            <div className={styles.actionButtons}>
              <svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
                <mask id="path-1-inside-1_1414_2651" fill="white">
                  <path d="M0 18C0 8.05888 8.05888 0 18 0C27.9411 0 36 8.05888 36 18C36 27.9411 27.9411 36 18 36C8.05888 36 0 27.9411 0 18Z" />
                </mask>
                <path d="M0 18C0 8.05888 8.05888 0 18 0C27.9411 0 36 8.05888 36 18C36 27.9411 27.9411 36 18 36C8.05888 36 0 27.9411 0 18Z" fill="white" />
                <path d="M18 35C8.61116 35 1 27.3888 1 18H-1C-1 28.4934 7.50659 37 18 37V35ZM35 18C35 27.3888 27.3888 35 18 35V37C28.4934 37 37 28.4934 37 18H35ZM18 1C27.3888 1 35 8.61116 35 18H37C37 7.50659 28.4934 -1 18 -1V1ZM18 -1C7.50659 -1 -1 7.50659 -1 18H1C1 8.61116 8.61116 1 18 1V-1Z" fill="#BBBBBB" mask="url(#path-1-inside-1_1414_2651)" />
                <path d="M24.5 9V8.5H24H12H11.5V9V26.0625V26.8756L12.2256 26.5087L17.5486 23.8172L17.5506 23.8162L18 23.5915L18.4494 23.8162L18.4514 23.8172L23.7744 26.5087L24.5 26.8756V26.0625V9ZM18.2236 24.3028L18 24.191L17.7764 24.3028L11 27.691V9C11 8.73478 11.1054 8.48043 11.2929 8.29289C11.4804 8.10536 11.7348 8 12 8H24C24.2652 8 24.5196 8.10536 24.7071 8.29289L25.0607 7.93934L24.7071 8.29289C24.8946 8.48043 25 8.73478 25 9V27.691L18.2236 24.3028Z" fill="#BBBBBB" stroke="#BBBBBB" />
              </svg>

              <svg style={{ marginLeft: '24px' }} width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
                <mask id="path-1-inside-1_1414_2654" fill="white">
                  <path d="M0 18C0 8.05888 8.05888 0 18 0C27.9411 0 36 8.05888 36 18C36 27.9411 27.9411 36 18 36C8.05888 36 0 27.9411 0 18Z" />
                </mask>
                <path d="M0 18C0 8.05888 8.05888 0 18 0C27.9411 0 36 8.05888 36 18C36 27.9411 27.9411 36 18 36C8.05888 36 0 27.9411 0 18Z" fill="white" />
                <path d="M18 35C8.61116 35 1 27.3888 1 18H-1C-1 28.4934 7.50659 37 18 37V35ZM35 18C35 27.3888 27.3888 35 18 35V37C28.4934 37 37 28.4934 37 18H35ZM18 1C27.3888 1 35 8.61116 35 18H37C37 7.50659 28.4934 -1 18 -1V1ZM18 -1C7.50659 -1 -1 7.50659 -1 18H1C1 8.61116 8.61116 1 18 1V-1Z" fill="#BBBBBB" mask="url(#path-1-inside-1_1414_2654)" />
                <path d="M15 15H16.5V24H15V15ZM19.5 15H21V24H19.5V15Z" fill="#BBBBBB" />
                <path d="M9 10.5V12H10.5V27C10.5 27.3978 10.658 27.7794 10.9393 28.0607C11.2206 28.342 11.6022 28.5 12 28.5H24C24.3978 28.5 24.7794 28.342 25.0607 28.0607C25.342 27.7794 25.5 27.3978 25.5 27V12H27V10.5H9ZM12 27V12H24V27H12ZM15 7.5H21V9H15V7.5Z" fill="#BBBBBB" />
              </svg>

              <svg style={{ marginLeft: '36px' }} width="150" height="34" viewBox="0 0 150 34" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M0 17C0 7.61116 7.61116 0 17 0H133C142.389 0 150 7.61116 150 17C150 26.3888 142.389 34 133 34H17C7.61116 34 0 26.3888 0 17Z" fill="#E1FCEA" />
                <path d="M33.4267 12.8233L33.4268 12.8234C33.4736 12.8702 33.5 12.9337 33.5 13C33.5 13 33.5 13.0001 33.5 13.0001V17H33V14.5V14H32.5L28.0005 14C28.0004 14 28.0002 14 28.0001 14C27.735 13.9996 27.4808 13.8941 27.2933 13.7067C27.1059 13.5192 27.0004 13.265 27 12.9999C27 12.9998 27 12.9996 27 12.9995L27 8.5V8H26.5H20.5H20V8.5V26.5V27H20.5H26V27.5H20.5006C20.2353 27.4997 19.981 27.3942 19.7934 27.2066C19.6059 27.0191 19.5004 26.7649 19.5 26.4997V8.50028C19.5003 8.23509 19.6058 7.98085 19.7933 7.79333C19.9809 7.60581 20.2351 7.50032 20.5003 7.5H27.9999C27.9999 7.5 28 7.5 28 7.5C28.0663 7.50004 28.1298 7.52639 28.1766 7.57325L28.1767 7.5733L33.4267 12.8233ZM28.3536 8.45702L27.5 7.60347V8.81058V13V13.5H28H32.1894H33.3965L32.543 12.6464L28.3536 8.45702Z" fill="#3ACE68" stroke="#3ACE68" />
                <path d="M31 25.9425L29.0575 24L28 25.0575L31 28.0575L37 22.0575L35.9425 21L31 25.9425Z" fill="#52BB77" />
                <path d="M51.066 23.119C50.284 23.119 49.5813 22.983 48.958 22.711C48.346 22.4277 47.8643 22.0423 47.513 21.555C47.1617 21.0563 46.9803 20.484 46.969 19.838H48.618C48.6747 20.3933 48.9013 20.8637 49.298 21.249C49.706 21.623 50.2953 21.81 51.066 21.81C51.8027 21.81 52.3807 21.6287 52.8 21.266C53.2307 20.892 53.446 20.416 53.446 19.838C53.446 19.3847 53.3213 19.0163 53.072 18.733C52.8227 18.4497 52.511 18.2343 52.137 18.087C51.763 17.9397 51.2587 17.781 50.624 17.611C49.842 17.407 49.213 17.203 48.737 16.999C48.2723 16.795 47.87 16.4777 47.53 16.047C47.2013 15.605 47.037 15.0157 47.037 14.279C47.037 13.633 47.2013 13.0607 47.53 12.562C47.8587 12.0633 48.3177 11.678 48.907 11.406C49.5077 11.134 50.1933 10.998 50.964 10.998C52.0747 10.998 52.9813 11.2757 53.684 11.831C54.398 12.3863 54.8003 13.123 54.891 14.041H53.191C53.1343 13.5877 52.8963 13.191 52.477 12.851C52.0577 12.4997 51.5023 12.324 50.811 12.324C50.165 12.324 49.638 12.494 49.23 12.834C48.822 13.1627 48.618 13.6273 48.618 14.228C48.618 14.6587 48.737 15.01 48.975 15.282C49.2243 15.554 49.5247 15.7637 49.876 15.911C50.2387 16.047 50.743 16.2057 51.389 16.387C52.171 16.6023 52.8 16.8177 53.276 17.033C53.752 17.237 54.16 17.56 54.5 18.002C54.84 18.4327 55.01 19.022 55.01 19.77C55.01 20.348 54.857 20.892 54.551 21.402C54.245 21.912 53.7917 22.3257 53.191 22.643C52.5903 22.9603 51.882 23.119 51.066 23.119ZM61.9105 13.514C62.6132 13.514 63.2479 13.667 63.8145 13.973C64.3812 14.2677 64.8232 14.7153 65.1405 15.316C65.4692 15.9167 65.6335 16.6477 65.6335 17.509V23H64.1035V17.73C64.1035 16.8007 63.8712 16.0923 63.4065 15.605C62.9419 15.1063 62.3072 14.857 61.5025 14.857C60.6865 14.857 60.0349 15.112 59.5475 15.622C59.0715 16.132 58.8335 16.8743 58.8335 17.849V23H57.2865V10.42H58.8335V15.01C59.1395 14.534 59.5589 14.1657 60.0915 13.905C60.6355 13.6443 61.2419 13.514 61.9105 13.514ZM72.2236 23.153C71.3509 23.153 70.5576 22.9547 69.8436 22.558C69.1409 22.1613 68.5856 21.6003 68.1776 20.875C67.7809 20.1383 67.5826 19.2883 67.5826 18.325C67.5826 17.373 67.7866 16.5343 68.1946 15.809C68.6139 15.0723 69.1806 14.5113 69.8946 14.126C70.6086 13.7293 71.4076 13.531 72.2916 13.531C73.1756 13.531 73.9746 13.7293 74.6886 14.126C75.4026 14.5113 75.9636 15.0667 76.3716 15.792C76.7909 16.5173 77.0006 17.3617 77.0006 18.325C77.0006 19.2883 76.7852 20.1383 76.3546 20.875C75.9352 21.6003 75.3629 22.1613 74.6376 22.558C73.9122 22.9547 73.1076 23.153 72.2236 23.153ZM72.2236 21.793C72.7789 21.793 73.3002 21.6627 73.7876 21.402C74.2749 21.1413 74.6659 20.7503 74.9606 20.229C75.2666 19.7077 75.4196 19.073 75.4196 18.325C75.4196 17.577 75.2722 16.9423 74.9776 16.421C74.6829 15.8997 74.2976 15.5143 73.8216 15.265C73.3456 15.0043 72.8299 14.874 72.2746 14.874C71.7079 14.874 71.1866 15.0043 70.7106 15.265C70.2459 15.5143 69.8719 15.8997 69.5886 16.421C69.3052 16.9423 69.1636 17.577 69.1636 18.325C69.1636 19.0843 69.2996 19.7247 69.5716 20.246C69.8549 20.7673 70.2289 21.1583 70.6936 21.419C71.1582 21.6683 71.6682 21.793 72.2236 21.793ZM80.5816 15.197C80.8536 14.6643 81.2389 14.2507 81.7376 13.956C82.2476 13.6613 82.8653 13.514 83.5906 13.514V15.112H83.1826C81.4486 15.112 80.5816 16.0527 80.5816 17.934V23H79.0346V13.684H80.5816V15.197ZM87.2634 14.959V20.45C87.2634 20.9033 87.3597 21.2263 87.5524 21.419C87.745 21.6003 88.0794 21.691 88.5554 21.691H89.6944V23H88.3004C87.439 23 86.793 22.8017 86.3624 22.405C85.9317 22.0083 85.7164 21.3567 85.7164 20.45V14.959H84.5094V13.684H85.7164V11.338H87.2634V13.684H89.6944V14.959H87.2634ZM93.1158 10.42V23H91.5688V10.42H93.1158ZM96.5514 12.171C96.2567 12.171 96.0074 12.069 95.8034 11.865C95.5994 11.661 95.4974 11.4117 95.4974 11.117C95.4974 10.8223 95.5994 10.573 95.8034 10.369C96.0074 10.165 96.2567 10.063 96.5514 10.063C96.8347 10.063 97.0727 10.165 97.2654 10.369C97.4694 10.573 97.5714 10.8223 97.5714 11.117C97.5714 11.4117 97.4694 11.661 97.2654 11.865C97.0727 12.069 96.8347 12.171 96.5514 12.171ZM97.2994 13.684V23H95.7524V13.684H97.2994ZM103.234 23.153C102.52 23.153 101.88 23.034 101.313 22.796C100.746 22.5467 100.299 22.2067 99.97 21.776C99.6413 21.334 99.46 20.8297 99.426 20.263H101.024C101.069 20.7277 101.285 21.1073 101.67 21.402C102.067 21.6967 102.582 21.844 103.217 21.844C103.806 21.844 104.271 21.7137 104.611 21.453C104.951 21.1923 105.121 20.8637 105.121 20.467C105.121 20.059 104.94 19.7587 104.577 19.566C104.214 19.362 103.653 19.1637 102.894 18.971C102.203 18.7897 101.636 18.6083 101.194 18.427C100.763 18.2343 100.389 17.9567 100.072 17.594C99.766 17.22 99.613 16.7327 99.613 16.132C99.613 15.656 99.7546 15.2197 100.038 14.823C100.321 14.4263 100.724 14.1147 101.245 13.888C101.766 13.65 102.361 13.531 103.03 13.531C104.061 13.531 104.894 13.7917 105.529 14.313C106.164 14.8343 106.504 15.5483 106.549 16.455H105.002C104.968 15.9677 104.77 15.5767 104.407 15.282C104.056 14.9873 103.58 14.84 102.979 14.84C102.424 14.84 101.982 14.959 101.653 15.197C101.324 15.435 101.16 15.7467 101.16 16.132C101.16 16.438 101.256 16.693 101.449 16.897C101.653 17.0897 101.902 17.2483 102.197 17.373C102.503 17.4863 102.922 17.6167 103.455 17.764C104.124 17.9453 104.668 18.1267 105.087 18.308C105.506 18.478 105.863 18.7387 106.158 19.09C106.464 19.4413 106.623 19.9003 106.634 20.467C106.634 20.977 106.492 21.436 106.209 21.844C105.926 22.252 105.523 22.575 105.002 22.813C104.492 23.0397 103.903 23.153 103.234 23.153ZM110.705 14.959V20.45C110.705 20.9033 110.801 21.2263 110.994 21.419C111.186 21.6003 111.521 21.691 111.997 21.691H113.136V23H111.742C110.88 23 110.234 22.8017 109.804 22.405C109.373 22.0083 109.158 21.3567 109.158 20.45V14.959H107.951V13.684H109.158V11.338H110.705V13.684H113.136V14.959H110.705ZM123.51 17.985C123.51 18.2797 123.493 18.5913 123.459 18.92H116.013C116.07 19.838 116.382 20.5577 116.948 21.079C117.526 21.589 118.223 21.844 119.039 21.844C119.708 21.844 120.263 21.691 120.705 21.385C121.159 21.0677 121.476 20.6483 121.657 20.127H123.323C123.074 21.0223 122.575 21.7533 121.827 22.32C121.079 22.8753 120.15 23.153 119.039 23.153C118.155 23.153 117.362 22.9547 116.659 22.558C115.968 22.1613 115.424 21.6003 115.027 20.875C114.631 20.1383 114.432 19.2883 114.432 18.325C114.432 17.3617 114.625 16.5173 115.01 15.792C115.396 15.0667 115.934 14.5113 116.625 14.126C117.328 13.7293 118.133 13.531 119.039 13.531C119.923 13.531 120.705 13.7237 121.385 14.109C122.065 14.4943 122.587 15.027 122.949 15.707C123.323 16.3757 123.51 17.135 123.51 17.985ZM121.912 17.662C121.912 17.0727 121.782 16.5683 121.521 16.149C121.261 15.7183 120.904 15.3953 120.45 15.18C120.008 14.9533 119.515 14.84 118.971 14.84C118.189 14.84 117.521 15.0893 116.965 15.588C116.421 16.0867 116.11 16.778 116.03 17.662H121.912ZM124.974 18.308C124.974 17.356 125.167 16.523 125.552 15.809C125.937 15.0837 126.464 14.5227 127.133 14.126C127.813 13.7293 128.572 13.531 129.411 13.531C130.136 13.531 130.811 13.701 131.434 14.041C132.057 14.3697 132.533 14.806 132.862 15.35V10.42H134.426V23H132.862V21.249C132.556 21.8043 132.103 22.2633 131.502 22.626C130.901 22.9773 130.199 23.153 129.394 23.153C128.567 23.153 127.813 22.949 127.133 22.541C126.464 22.133 125.937 21.5607 125.552 20.824C125.167 20.0873 124.974 19.2487 124.974 18.308ZM132.862 18.325C132.862 17.6223 132.72 17.0103 132.437 16.489C132.154 15.9677 131.768 15.571 131.281 15.299C130.805 15.0157 130.278 14.874 129.7 14.874C129.122 14.874 128.595 15.01 128.119 15.282C127.643 15.554 127.263 15.9507 126.98 16.472C126.697 16.9933 126.555 17.6053 126.555 18.308C126.555 19.022 126.697 19.6453 126.98 20.178C127.263 20.6993 127.643 21.1017 128.119 21.385C128.595 21.657 129.122 21.793 129.7 21.793C130.278 21.793 130.805 21.657 131.281 21.385C131.768 21.1017 132.154 20.6993 132.437 20.178C132.72 19.6453 132.862 19.0277 132.862 18.325Z" fill="#3ACE68" />
              </svg>


            </div>
          </div>
          <diV className={styles.userInfo}>
            <div>Date: {candidate.date} | Location: {candidate.location}</div>
            <div>iRecruit Relevant Score: {candidate.score}</div>
            <div className={styles.links}>
              <a style={{ color: '#F2665D' }} href="#">View Profile</a> | <a style={{ color: '#F2665D' }} href="#">View Resume</a>
            </div>
          </diV>
        </div>
        <hr />

        {/* Interview Rounds */}
        <div className={styles.interviewSection}>
          <div className={styles.interviewProgress}>
            <div>Interview</div>
            <Progress />
          </div>
          <div className={styles.rounds}>
            {/* {interviewRounds.map((round, index) => (
              <div key={index} className={styles[`round${round.status.charAt(0).toUpperCase() + round.status.slice(1)}`]}>
                {round.status === "completed" ? <GreenCirlce /> : <FaRegCircle className={styles.icon} />}
                <div>
                  <p><strong>Round {round.round} {round.label ? `- ${round.label}` : ""}</strong></p>
                  <p>Date: {round.date || "To be scheduled"} | Notes:</p>
                </div>
              </div>
            ))} */}

            <InterviewTimeline />
          </div>
        </div>
      </div>
    </div>
  );
};

export default InterviewModal;
